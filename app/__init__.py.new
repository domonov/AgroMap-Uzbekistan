from flask import Flask, request, g
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_babel import Babel
from flask_mail import Mail
from flask_caching import Cache
from flask_login import LoginManager
from dotenv import load_dotenv
import os
import logging
from logging.handlers import RotatingFileHandler

# Initialize extensions
db = SQLAlchemy()
migrate = Migrate()
babel = Babel()
mail = Mail()
cache = Cache()
login = LoginManager()

def create_app(config_name=None):
    app = Flask(__name__,
                static_folder='static',
                template_folder='templates')

    # Load environment variables
    load_dotenv()

    # Import configuration
    from config import config
    config_name = config_name or os.environ.get('FLASK_ENV', 'development')
    app.config.from_object(config[config_name])

    # Initialize extensions with app
    db.init_app(app)
    migrate.init_app(app, db)
    mail.init_app(app)
    cache.init_app(app)
    login.init_app(app)
    
    # Configure Flask-Login
    login.login_view = 'auth.login'
    login.login_message = 'Please log in to access this page.'
    login.login_message_category = 'info'
    
    @login.user_loader
    def load_user(user_id):
        from app.models import User
        return User.query.get(int(user_id))
    
    # Define locale selector function for Babel
    def get_locale():
        # Check URL parameter first
        lang = request.args.get('lang')
        if lang in app.config.get('LANGUAGES', ['en']):
            return lang
        
        # Check for language in cookies
        lang = request.cookies.get('language')
        if lang in app.config.get('LANGUAGES', ['en']):
            return lang
            
        # Use browser preferred language
        return request.accept_languages.best_match(app.config.get('LANGUAGES', ['en'])) or 'en'
    
    # Configure Babel with locale selector
    babel.init_app(app, locale_selector=get_locale)
    
    # Handle language selection
    @app.before_request
    def before_request():
        g.locale = get_locale()
    
    # Create translation helper
    from app.translations import get_translation
    @app.context_processor
    def utility_processor():
        def translate(key):
            return get_translation(key, g.locale)
        return {'_': translate}
    
    # Configure logging for production
    if not app.debug and not app.testing:
        configure_logging(app)
    
    # Configure security headers for production
    if app.config.get('SECURITY_HEADERS'):
        configure_security_headers(app)
    
    # Register blueprints
    from .routes import bp as main_bp
    app.register_blueprint(main_bp)
    
    from .auth import bp as auth_bp
    app.register_blueprint(auth_bp, url_prefix='/auth')
    
    # Import models to ensure they are registered with SQLAlchemy
    from . import models
    
    # Create database tables
    with app.app_context():
        db.create_all()

    return app


def configure_logging(app):
    """Configure logging for production"""
    if not os.path.exists('logs'):
        os.mkdir('logs')
    
    file_handler = RotatingFileHandler(
        app.config.get('LOG_FILE', 'logs/agromap.log'),
        maxBytes=10240000,
        backupCount=10
    )
    
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
    ))
    
    file_handler.setLevel(getattr(logging, app.config.get('LOG_LEVEL', 'INFO')))
    app.logger.addHandler(file_handler)
    app.logger.setLevel(getattr(logging, app.config.get('LOG_LEVEL', 'INFO')))
    app.logger.info('AgroMap application startup')


def configure_security_headers(app):
    """Configure security headers for production"""
    @app.after_request
    def set_security_headers(response):
        headers = app.config.get('SECURITY_HEADERS', {})
        for header, value in headers.items():
            response.headers[header] = value
        return response
